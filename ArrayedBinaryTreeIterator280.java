/*
name: Thang Nguyen
nsid: dun329
student number:11275930
course number:CMPT280
*/


package lib280.tree;

import lib280.base.LinearIterator280;
import lib280.exception.*;

public class ArrayedBinaryTreeIterator280<I> extends ArrayedBinaryTreePosition280 implements LinearIterator280<I> {

	// This is a reference to the tree that created this iterator object.
	ArrayedBinaryTree280<I> tree;

	// An integer that represents the cursor position is inherited from
	// ArrayedBinaryTreePosition280.

	/**
	 * Create a new iterator from a given heap.
	 * @param t The heap for which to create a new iterator.
	 */
	public ArrayedBinaryTreeIterator280(ArrayedBinaryTree280<I> t) {
		super(t.currentNode);
		this.tree = t;
	}

	// TODO - Complete the following methods which are required by LinearIterator280<I>
	// Note that these method stubs were automatically generated by IntelliJ and every one of them
	// requires your attention.
	/**
	 * Is the current position before the heap or before its root node ?
	 */
	@Override
	public boolean before() {
		return this.currentNode == 0;
	}

	/**
	 * Is the current position after the heap?
	 */
	@Override
	public boolean after() {
		return this.tree.isEmpty() ||this.currentNode - this.tree.count > 0;

	}
	/**
	 * Is the current position after the heap?
	 */
	@Override
	public void goForth() throws AfterTheEnd280Exception {
		if(!this.after()){
			this.currentNode = this.currentNode + 1;
		} else {
			throw new AfterTheEnd280Exception("Cannot advance cursor in the after position.");
		}
	}


	/**
	 * Move to the root node of the tree
	 */
	@Override
	public void goFirst() throws ContainerEmpty280Exception {
		if(!this.tree.isEmpty()){
			this.currentNode = 1;
		} else {
			throw new ContainerEmpty280Exception("Cannot move to first item of an empty tree.");
		}
	}

	/**
	 * Go before the heap
	 */
	@Override
	public void goBefore() {
		this.currentNode = 0;
	}

	/**
	 * Go after the heap
	 */
	@Override
	public void goAfter() {
		if(!this.tree.isEmpty()) {
			this.currentNode = this.tree.count + 1;
		} else {
			this.currentNode = 0;
		}

	}

	/**
	 * Get the item where the cursor point to
	 * @return The item where the cursor point to
	 */
	@Override
	public I item() throws NoCurrentItem280Exception {
		if(!itemExists()){
			throw new NoCurrentItem280Exception("Cant see this item");
		}
		return tree.items[currentNode];
	}

	/**
	 * Check if an item exists or not
	 * @return true if cursor point at the item, false otherwise.
	 */
	@Override
	public boolean itemExists() {
		return  (currentNode > 0 && currentNode <= this.tree.count) && this.tree.count > 0;
	}

}
